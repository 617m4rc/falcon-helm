{{- if .Values.container.enabled }}
{{- $fullName := "falcon-injector" -}}
{{- $certValid := (.Values.container.certExpiration | int) -}}
{{- $altNames := list (  printf "%s.%s.svc" $fullName .Release.Namespace ) (  printf "%s.%s.svc.cluster.local" $fullName .Release.Namespace ) ( printf "%s.%s" $fullName .Release.Namespace ) ( printf "%s" $fullName ) -}}
{{- $ca := genCA ( printf "%s ca" .Release.Namespace ) $certValid -}}
{{- $cert := genSignedCert ( printf "%s.%s.svc" $fullName .Release.Namespace ) nil $altNames $certValid $ca -}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: falcon-injector
  namespace: {{ .Release.Namespace }}
  labels:
    app: falcon-injector
spec:
  replicas: 1
  selector:
    matchLabels:
      app: falcon-injector
  template:
    metadata:
      labels:
        app: falcon-injector
    spec:
      securityContext:
        runAsNonRoot: true
      {{- if .Values.container.image.pullSecrets.enable }}
      imagePullSecrets:
        - name: crowdstrike-falcon-pull-secret
      {{- end }}
      containers:
      - name: falcon-injector
        image: "{{ .Values.container.image.repository }}:{{ .Values.container.image.tag }}"
        imagePullPolicy: "{{ .Values.container.image.pullPolicy }}"
        command: ["injector"]
        envFrom:
        - configMapRef:
            name: {{ include "falcon-sensor.fullname" . }}-config
        ports:
        - containerPort: 8443
          name: api
        volumeMounts:
        - name: falcon-tls-certs
          mountPath: /run/secrets/tls
          readOnly: true
        readinessProbe:
          httpGet:
            path: /live
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /live
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
      - name: falcon-tls-certs
        secret:
          secretName: falcon-injector-tls
---
apiVersion: v1
kind: Secret
metadata:
  name: falcon-injector-tls
  namespace: {{ .Release.Namespace }}
type: Opaque
data:
  tls.crt: {{ $cert.Cert | b64enc }}
  tls.key: {{ $cert.Key | b64enc }}
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: falcon-injector.falcon-system.svc
webhooks:
  - name: falcon-injector.falcon-system.svc
    admissionReviewVersions:
      - v1
      - v1beta1
    sideEffects: None
    namespaceSelector:
      matchExpressions:
      - key: sensor.falcon-system.crowdstrike.com/injection
        operator: {{ if .Values.container.disableNSInjection }}In{{ else }}NotIn{{- end }}
        values:
          - {{ if .Values.container.disableNSInjection }}enabled{{ else }}disabled{{- end }}
      - key: "name"
        operator: "NotIn"
        values:
        - {{ .Release.Namespace }}
    clientConfig:
      service:
        name: falcon-injector
        namespace: {{ .Release.Namespace }}
        path: "/mutate"
      caBundle: {{ $ca.Cert | b64enc }}
    failurePolicy: Fail
    rules:
      - operations:
          - CREATE
        apiGroups:
          - ""
        apiVersions:
          - v1
        resources:
          - pods
    timeoutSeconds: 30
{{- end }}
